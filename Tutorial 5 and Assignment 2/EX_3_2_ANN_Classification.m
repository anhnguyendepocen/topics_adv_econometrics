% The goal of this exercise is creating a handwriting recognition 
% for a data set that contains handwritten digits between zero and nine 
% using a multiclass classifier generated by an artificial neural network 
% with one hidden layer.
% The handwritten digits are characterized by a 20 x 20 pixel gray level
% matrix that is stored in the lines of the file 'digits_data.csv'. The label
% corresponding to each digit is stored in digits_labels.csv; the digit "0"
% is mapped to label "10" in this list.

clear
close all

%% 1.- Read the data out of the files 'digits_data.csv' and 'digits_labels.csv' 
% and create a design matrix X
% in which the rows contain the pixel gray levels of each image. Each row
% should contain 400 values. Create also a vector y containing the labels
% associated to each picture

X = csvread('digits_data.csv');
Y = csvread('digits_labels.csv');

n = size(X, 1);
p = size(X, 2);

%% 2.- Use the function [h, display_array] = displayData(X, example_width)
% created in Ex_3_1 to display 100 randomly chosen figures in the data set.

r = randperm(n);
selected = X(r(1:100), :);

displayData(selected)

%% 3.- Load up the weights Theta1 and Theta2 stored in the file 'paramsNN.mat'
% and corresponding to the two layers of a pretrained neural network for this 
% classification task. The first columns of both Theta1 and Theta2 correspond
% to an intercept. These weights are optimized for a NN that uses the
% logistic function as activation function.

load('paramsNN.mat')

%% 4.- Use the NN associated to these weights to classify the digits in 'digits_data.csv'
% Compute subsequently the empirical error of the classifier. 

% The Neural Network has the following structure:
%   LAYER 1 : 401 -> 25 fully-connected;
%   LAYER 2 : 26  -> 10 fully-connected;

sig = @(z) 1./(1 + exp(-z));

layer1 = sig(Theta1 * [ones(1, size(X,1)); X']);
layer2 = sig(Theta2 * [ones(1, size(layer1',1)); layer1]);

[~, class_nn] = max(layer2, [], 1);

emp_nn_error = sum(class_nn(:) ~= Y)/n;

% Take into account the intercept and create a function f = sigmoid(z), namely 
% f(z) = 1/(1 + exp(-z));


%% 5.- Create a misclassification matrix whose (i,j)th element
% denotes the percentage of times in which the classifier assigns the 
% figure with label i the label j.

misclass = zeros(10, 10);

for k = 1:10
    for j = 1:10
        
        misclass(k, j) = sum(class_nn(Y == k) == j)/(n/10);
        
    end
end

figure
imagesc(misclass)
pbaspect([2 2 1])
title('Logit classifier - Misclassification matrix')

%% 6.- Use the function displayData in point 2 in order to visualize the 
% sevens that get classified as a nine.

misclass_7_to_9 = logical( (Y == 7) .* (class_nn(:) == 9) );
misclass_7_to_9_digit = X(misclass_7_to_9, :);

displayData(misclass_7_to_9_digit)
title('Miscalssification - digit "7" as "9"')
